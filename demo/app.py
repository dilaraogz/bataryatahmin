import streamlit as st
import requests
import json

# ==============================================================================
# UYGULAMA ARAYÃœZÃœ (UI)
# ==============================================================================
# Sayfa yapÄ±landÄ±rmasÄ±nÄ± ayarla ve baÅŸlÄ±klarÄ± ekle
st.set_page_config(page_title="SoH Tahmin UygulamasÄ±", layout="centered")
st.title("ğŸ”‹ Elektrikli AraÃ§ Batarya SaÄŸlÄ±ÄŸÄ± (SoH) Tahmin UygulamasÄ±")
st.markdown("Bu uygulama, bataryanÄ±zÄ±n anlÄ±k verilerine gÃ¶re kalan saÄŸlÄ±k durumunu tahmin eder.")

# API URL'si
# Docker Compose iÃ§indeki servis adÄ±na gÃ¶re belirlendi: 'api'
# Bu sayede konteynerler birbirini bu isimle bulabilir.
API_URL = "http://api:8000/predict" 

# ==============================================================================
# KULLANICI GÄ°RDÄ°LERÄ° (SOL MENÃœ)
# ==============================================================================
# KullanÄ±cÄ±dan veri almak iÃ§in sol menÃ¼de bir form oluÅŸturalÄ±m.
# 'with st.form' yapÄ±sÄ±, tÃ¼m girdiler alÄ±ndÄ±ktan sonra tek seferde iÅŸlem yapÄ±lmasÄ±nÄ± saÄŸlar.
st.sidebar.header("Batarya DeÄŸerlerini Girin")

with st.sidebar.form(key='prediction_form'):
    # DÃ¶ngÃ¼ SayÄ±sÄ±
    cycle = st.number_input(
        label="DÃ¶ngÃ¼ SayÄ±sÄ± (Cycle)",
        min_value=1,
        max_value=2000,
        value=150, # BaÅŸlangÄ±Ã§ deÄŸeri
        help="BataryanÄ±n tamamladÄ±ÄŸÄ± toplam ÅŸarj/deÅŸarj dÃ¶ngÃ¼sÃ¼ sayÄ±sÄ±."
    )
    
    # Ortalama DeÅŸarj SÄ±caklÄ±ÄŸÄ±
    temp = st.number_input(
        label="Ortalama DeÅŸarj SÄ±caklÄ±ÄŸÄ± (Â°C)",
        min_value=10.0,
        max_value=60.0,
        value=35.0, # BaÅŸlangÄ±Ã§ deÄŸeri
        format="%.2f",
        help="Son deÅŸarj sÄ±rasÄ±ndaki ortalama batarya sÄ±caklÄ±ÄŸÄ±."
    )
    
    # Ä°Ã§ DirenÃ§
    resistance = st.number_input(
        label="Ä°Ã§ DirenÃ§ (Ohm)",
        min_value=0.0010,
        max_value=0.0500,
        value=0.0180, # BaÅŸlangÄ±Ã§ deÄŸeri
        format="%.4f",
        help="BataryanÄ±n en son Ã¶lÃ§Ã¼len iÃ§ direnÃ§ deÄŸeri."
    )
    
    # Formu gÃ¶ndermek iÃ§in buton
    submit_button = st.form_submit_button(label='SoH Tahmin Et')


# ==============================================================================
# TAHMÄ°N SONUCUNUN GÃ–STERÄ°LMESÄ°
# ==============================================================================
# Butona basÄ±ldÄ±ÄŸÄ±nda bu blok Ã§alÄ±ÅŸÄ±r.
if submit_button:
    # Girdi verilerini API'nin beklediÄŸi JSON formatÄ±na dÃ¶nÃ¼ÅŸtÃ¼r
    payload = {
        "cycle": cycle,
        "avg_temp_discharge_smoothed": temp,
        "internal_resistance_smoothed": resistance
    }

    # KullanÄ±cÄ±nÄ±n ne gÃ¶nderdiÄŸini gÃ¶rmesi iÃ§in bir bilgi kutucuÄŸu
    st.info(f"API'ye gÃ¶nderilen veri: `{json.dumps(payload)}`")

    # API'ye istek gÃ¶nderme ve olasÄ± hatalarÄ± yakalama
    try:
        # API'ye POST isteÄŸi gÃ¶nder. 'timeout' eklemek iyi bir pratiktir.
        with st.spinner('Modelden tahmin alÄ±nÄ±yor...'):
            response = requests.post(API_URL, json=payload, timeout=10)
        
        # EÄŸer API'den baÅŸarÄ±lÄ± bir cevap (HTTP 200) dÃ¶nerse...
        if response.status_code == 200:
            result = response.json()
            predicted_soh = result.get("predicted_soh")
            
            st.success(f"**Tahmin BaÅŸarÄ±lÄ±!**")
            
            # Sonucu bÃ¼yÃ¼k bir metrik olarak gÃ¶ster
            st.metric(label="Tahmin Edilen Batarya SaÄŸlÄ±ÄŸÄ±", value=f"{predicted_soh} %")

        # EÄŸer API'den bir hata dÃ¶nerse...
        else:
            st.error(f"API'den bir hata dÃ¶ndÃ¼. Hata Kodu: {response.status_code}")
            st.json(response.text)

    # EÄŸer API'ye hiÃ§ ulaÅŸÄ±lamazsa (aÄŸ hatasÄ± vb.)...
    except requests.exceptions.RequestException as e:
        st.error(f"API'ye baÄŸlanÄ±rken bir hata oluÅŸtu: {e}")
        st.warning("LÃ¼tfen API servisinin Ã§alÄ±ÅŸtÄ±ÄŸÄ±ndan ve Docker aÄŸÄ±nÄ±n doÄŸru yapÄ±landÄ±rÄ±ldÄ±ÄŸÄ±ndan emin olun.")